cmake_minimum_required (VERSION 3.11)
if(UNIX AND NOT APPLE)
    set(LINUX TRUE)
endif()

if(WIN32)
message("WIN32 platform")
message("${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
set(CMAKE_TOOLCHAIN_FILE D:/program/vcpkg/scripts/buildsystems/vcpkg.cmake)
elseif(APPLE)
message("APPLE platform")
elseif(LINUX)
message("LINUX platform")
set(CMAKE_C_COMPILER "/opt/app/gcc/bin/gcc")
set(CMAKE_CXX_COMPILER "/opt/app/gcc/bin/g++")
elseif(UNIX)
message("UNIX platform")
else()
message("unknown platform")
endif()

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED on)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
project (gtkdemo)

if(WIN32)

include_directories(D:/program/cpp/include)
LINK_DIRECTORIES(D:/program/cpp/lib)
#ADD_DEFINITIONS(-DCMAKE_BUILD_TYPE = DEBUG)
include_directories(D:/program/vcpkg/installed/x64-windows/include)
LINK_DIRECTORIES(D:/program/vcpkg/installed/x64-windows/debug/lib)
LINK_DIRECTORIES(D:/program/vcpkg/installed/x64-windows/debug/lib/manual-link)
include_directories(D:/program/vcpkg/installed/x64-windows-static/include)
LINK_DIRECTORIES(D:/program/vcpkg/installed/x64-windows-static/debug/lib)
LINK_DIRECTORIES(D:/program/vcpkg/installed/x64-windows-static/debug/lib/manual-link)

include_directories(D:/program/vcpkg/installed/x64-windows/debug/lib/graphene-1.0/include)
include_directories(D:/program/vcpkg/installed/x64-windows/include/graphene-1.0)
include_directories(D:/program/vcpkg/installed/x64-windows/include/gdk-pixbuf-2.0)
include_directories(D:/program/vcpkg/installed/x64-windows/include/harfbuzz)
include_directories(D:/program/vcpkg/installed/x64-windows/include/pango-1.0)
include_directories(D:/program/vcpkg/installed/x64-windows/include/cairo)
include_directories(D:/program/vcpkg/installed/x64-windows/include/glib-2.0)
include_directories(D:/program/vcpkg/installed/x64-windows/debug/lib/glib-2.0/include)
include_directories(D:/program/vcpkg/installed/x64-windows/include/gtk-4.0)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj /wd4430 /utf-8")

if (MSVC)
    set(CompilerFlags
        CMAKE_CXX_FLAGS
        CMAKE_CXX_FLAGS_DEBUG
        CMAKE_CXX_FLAGS_RELEASE
        CMAKE_C_FLAGS
        CMAKE_C_FLAGS_DEBUG
        CMAKE_C_FLAGS_RELEASE
        )
    foreach(CompilerFlag ${CompilerFlags})
        string(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
    endforeach()
endif(MSVC)

message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
message(STATUS "CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
message(STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")
message(STATUS "CMAKE_C_FLAGS_DEBUG: ${CMAKE_C_FLAGS_DEBUG}")
add_definitions(-DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0601)

elseif(APPLE)

include_directories(/root/app/vcpkg/installed/x64-linux/include)
LINK_DIRECTORIES(/root/app/vcpkg/installed/x64-linux/debug/lib)
LINK_DIRECTORIES(/root/app/vcpkg/installed/x64-linux/debug/lib/manual-link)
include_directories("/usr/local/include")
LINK_DIRECTORIES(/usr/local/lib)

elseif(LINUX)

include_directories("/opt/app/3rd/cpp/include")
LINK_DIRECTORIES(/opt/app/3rd/cpp/lib)
include_directories("/opt/app/3rd/cpptools/include")
LINK_DIRECTORIES(/opt/app/3rd/cpptools/lib)
include_directories(/opt/app/vcpkg/installed/x64-linux/include)
LINK_DIRECTORIES(/opt/app/vcpkg/installed/x64-linux/debug/lib)
LINK_DIRECTORIES(/opt/app/vcpkg/installed/x64-linux/debug/lib/manual-link)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -O0 -ggdb")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,-Bstatic -lstdc++ -Wl,-Bdynamic")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,--whole-archive -lpthread -Wl,--no-whole-archive")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc")
else()
endif()

ADD_DEFINITIONS(-DBOOST_UUID_RANDOM_PROVIDER_FORCE_POSIX -DBOOST_ASIO_DISABLE_SMALL_BLOCK_RECYCLING)

set(MODULE_NAME example-0)
file(GLOB_RECURSE SRC_LIST src/example-0.cpp)
ADD_EXECUTABLE(${MODULE_NAME} ${SRC_LIST})
if(WIN32)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon boost_locale-vc140-mt-gd gtk-4 glib-2.0 gio-2.0 gobject-2.0 cairo)
elseif(APPLE)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon)
else()
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon fslog spdlogd fmtd)
endif()

set(MODULE_NAME example-1)
file(GLOB_RECURSE SRC_LIST src/example-1.cpp)
ADD_EXECUTABLE(${MODULE_NAME} ${SRC_LIST})
if(WIN32)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon boost_locale-vc140-mt-gd gtk-4 glib-2.0 gio-2.0 gobject-2.0 cairo)
elseif(APPLE)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon)
else()
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon fslog spdlogd fmtd)
endif()

set(MODULE_NAME example-2)
file(GLOB_RECURSE SRC_LIST src/example-2.cpp)
ADD_EXECUTABLE(${MODULE_NAME} ${SRC_LIST})
if(WIN32)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon boost_locale-vc140-mt-gd gtk-4 glib-2.0 gio-2.0 gobject-2.0 cairo)
elseif(APPLE)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon)
else()
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon fslog spdlogd fmtd)
endif()

set(MODULE_NAME example-3)
file(GLOB_RECURSE SRC_LIST src/example-3.cpp)
ADD_EXECUTABLE(${MODULE_NAME} ${SRC_LIST})
if(WIN32)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon boost_locale-vc140-mt-gd gtk-4 glib-2.0 gio-2.0 gobject-2.0 cairo)
elseif(APPLE)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon)
else()
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon fslog spdlogd fmtd)
endif()

set(MODULE_NAME example-4)
file(GLOB_RECURSE SRC_LIST src/example-4.cpp)
ADD_EXECUTABLE(${MODULE_NAME} ${SRC_LIST})
if(WIN32)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon boost_locale-vc140-mt-gd gtk-4 glib-2.0 gio-2.0 gobject-2.0 cairo)
elseif(APPLE)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon)
else()
    TARGET_LINK_LIBRARIES(${MODULE_NAME} cppcommon fslog spdlogd fmtd)
endif()
